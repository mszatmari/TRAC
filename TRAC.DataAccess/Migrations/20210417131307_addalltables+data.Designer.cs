// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TRAC.DataAccess.Data;

namespace TRAC.DataAccess.Migrations
{
    [DbContext(typeof(TRACContext))]
    [Migration("20210417131307_addalltables+data")]
    partial class addalltablesdata
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("TRAC.DataAccess.Data.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AnswerDefinitionId")
                        .HasColumnType("int");

                    b.Property<int>("ChecklistId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionDefinitionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnswerDefinitionId");

                    b.HasIndex("ChecklistId");

                    b.HasIndex("QuestionDefinitionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("TRAC.DataAccess.Data.AnswerDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("InvolveTax")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<int>("QuestionDefinitionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionDefinitionId");

                    b.ToTable("AnswerDefinitions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InvolveTax = 0,
                            Label = "Yes",
                            QuestionDefinitionId = 1
                        },
                        new
                        {
                            Id = 2,
                            InvolveTax = 0,
                            Label = "No",
                            QuestionDefinitionId = 1
                        },
                        new
                        {
                            Id = 3,
                            InvolveTax = 0,
                            Label = "Yes",
                            QuestionDefinitionId = 2
                        },
                        new
                        {
                            Id = 4,
                            InvolveTax = 0,
                            Label = "No",
                            QuestionDefinitionId = 2
                        },
                        new
                        {
                            Id = 5,
                            InvolveTax = 0,
                            Label = "Yes",
                            QuestionDefinitionId = 3
                        },
                        new
                        {
                            Id = 6,
                            InvolveTax = 0,
                            Label = "No",
                            QuestionDefinitionId = 3
                        },
                        new
                        {
                            Id = 7,
                            InvolveTax = 0,
                            Label = "Yes",
                            QuestionDefinitionId = 4
                        },
                        new
                        {
                            Id = 8,
                            InvolveTax = 0,
                            Label = "No",
                            QuestionDefinitionId = 4
                        },
                        new
                        {
                            Id = 9,
                            InvolveTax = 0,
                            Label = "Yes",
                            QuestionDefinitionId = 5
                        },
                        new
                        {
                            Id = 10,
                            InvolveTax = 0,
                            Label = "No",
                            QuestionDefinitionId = 5
                        },
                        new
                        {
                            Id = 11,
                            InvolveTax = 0,
                            Label = "Yes",
                            QuestionDefinitionId = 6
                        },
                        new
                        {
                            Id = 12,
                            InvolveTax = 0,
                            Label = "No",
                            QuestionDefinitionId = 6
                        });
                });

            modelBuilder.Entity("TRAC.DataAccess.Data.Checklist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CheckListStatusId")
                        .HasColumnType("int");

                    b.Property<int>("ChecklistDefinitionId")
                        .HasColumnType("int");

                    b.Property<string>("EntityName")
                        .HasColumnType("text");

                    b.Property<int>("FinancialYear")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RejectedComment")
                        .HasColumnType("text");

                    b.Property<int?>("ReportId")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ValidatorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CheckListStatusId");

                    b.HasIndex("ChecklistDefinitionId");

                    b.HasIndex("ReportId");

                    b.HasIndex("StaffId");

                    b.HasIndex("ValidatorId");

                    b.ToTable("Checklists");
                });

            modelBuilder.Entity("TRAC.DataAccess.Data.ChecklistDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ChecklistDefinitionId")
                        .HasColumnType("int");

                    b.Property<int?>("ChecklistDefinitionStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChecklistDefinitionId");

                    b.ToTable("ChecklistDefinitions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChecklistDefinitionStatusId = 2,
                            Title = "Checklist 1"
                        });
                });

            modelBuilder.Entity("TRAC.DataAccess.Data.ChecklistDefinitionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ChecklistDefinitionStatuses");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Code = "OPEN",
                            Label = "Open"
                        },
                        new
                        {
                            Id = 1,
                            Code = "ClOSED",
                            Label = "Closed"
                        });
                });

            modelBuilder.Entity("TRAC.DataAccess.Data.ChecklistStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ChecklistStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "IN_PROGRESS",
                            Label = "In progress"
                        },
                        new
                        {
                            Id = 2,
                            Code = "ClOSED",
                            Label = "Closed"
                        },
                        new
                        {
                            Id = 3,
                            Code = "PENDING_VALIDATION",
                            Label = "Pending Validation"
                        });
                });

            modelBuilder.Entity("TRAC.DataAccess.Data.MailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<string>("CC")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MailTemplates");
                });

            modelBuilder.Entity("TRAC.DataAccess.Data.QuestionDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsAlwaysDisplayed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("QuestionOrder")
                        .HasColumnType("int");

                    b.Property<int?>("SectionDefinitionId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SectionDefinitionId");

                    b.ToTable("QuestionDefinitions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsAlwaysDisplayed = true,
                            QuestionOrder = 1,
                            SectionDefinitionId = 1,
                            Title = "Question 1"
                        },
                        new
                        {
                            Id = 2,
                            IsAlwaysDisplayed = true,
                            QuestionOrder = 2,
                            SectionDefinitionId = 1,
                            Title = "Question 2"
                        },
                        new
                        {
                            Id = 3,
                            IsAlwaysDisplayed = true,
                            QuestionOrder = 1,
                            SectionDefinitionId = 2,
                            Title = "Question 3"
                        },
                        new
                        {
                            Id = 4,
                            IsAlwaysDisplayed = true,
                            QuestionOrder = 2,
                            SectionDefinitionId = 2,
                            Title = "Question 4"
                        },
                        new
                        {
                            Id = 5,
                            IsAlwaysDisplayed = true,
                            QuestionOrder = 1,
                            SectionDefinitionId = 3,
                            Title = "Question 5"
                        },
                        new
                        {
                            Id = 6,
                            IsAlwaysDisplayed = true,
                            QuestionOrder = 2,
                            SectionDefinitionId = 3,
                            Title = "Question 6"
                        });
                });

            modelBuilder.Entity("TRAC.DataAccess.Data.QuestionDisplayCondition", b =>
                {
                    b.Property<int>("AnswerDefinitionId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionToDisplayId")
                        .HasColumnType("int");

                    b.HasKey("AnswerDefinitionId", "QuestionToDisplayId");

                    b.HasIndex("QuestionToDisplayId");

                    b.ToTable("QuestionDisplayConditions");
                });

            modelBuilder.Entity("TRAC.DataAccess.Data.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte[]>("Content")
                        .HasColumnType("varbinary(4000)");

                    b.Property<string>("ReportName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("TRAC.DataAccess.Data.SectionDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ChecklistDefinitionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("SectionOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChecklistDefinitionId");

                    b.ToTable("SectionDefinitions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChecklistDefinitionId = 1,
                            Name = "Section 1",
                            SectionOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            ChecklistDefinitionId = 1,
                            Name = "Section 2",
                            SectionOrder = 2
                        },
                        new
                        {
                            Id = 3,
                            ChecklistDefinitionId = 1,
                            Name = "Section 3",
                            SectionOrder = 3
                        });
                });

            modelBuilder.Entity("TRAC.DataAccess.Data.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Firstname")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.HasKey("StaffId");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("TRAC.DataAccess.Data.WBS", b =>
                {
                    b.Property<string>("PRJ_ID_SAP")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("PRJ_CLI_NAME")
                        .HasColumnType("text");

                    b.Property<string>("PRJ_Name")
                        .HasColumnType("text");

                    b.Property<string>("PRJ_Year")
                        .HasColumnType("text");

                    b.HasKey("PRJ_ID_SAP");

                    b.ToTable("WBs");
                });

            modelBuilder.Entity("TRAC.DataAccess.Data.Answer", b =>
                {
                    b.HasOne("TRAC.DataAccess.Data.AnswerDefinition", "AnswerDefinition")
                        .WithMany("Answers")
                        .HasForeignKey("AnswerDefinitionId");

                    b.HasOne("TRAC.DataAccess.Data.Checklist", "Checklist")
                        .WithMany("Answers")
                        .HasForeignKey("ChecklistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TRAC.DataAccess.Data.QuestionDefinition", "QuestionDefinition")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnswerDefinition");

                    b.Navigation("Checklist");

                    b.Navigation("QuestionDefinition");
                });

            modelBuilder.Entity("TRAC.DataAccess.Data.AnswerDefinition", b =>
                {
                    b.HasOne("TRAC.DataAccess.Data.QuestionDefinition", "QuestionDefinition")
                        .WithMany("AnswerDefinitions")
                        .HasForeignKey("QuestionDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionDefinition");
                });

            modelBuilder.Entity("TRAC.DataAccess.Data.Checklist", b =>
                {
                    b.HasOne("TRAC.DataAccess.Data.ChecklistStatus", "ChecklistStatus")
                        .WithMany("Checklists")
                        .HasForeignKey("CheckListStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TRAC.DataAccess.Data.ChecklistDefinition", "ChecklistDefinition")
                        .WithMany("Checklists")
                        .HasForeignKey("ChecklistDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TRAC.DataAccess.Data.Report", "Report")
                        .WithMany("Checklists")
                        .HasForeignKey("ReportId");

                    b.HasOne("TRAC.DataAccess.Data.Staff", "Creator")
                        .WithMany("CreatorChecklists")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TRAC.DataAccess.Data.Staff", "Validator")
                        .WithMany("ValidatorChecklists")
                        .HasForeignKey("ValidatorId");

                    b.Navigation("ChecklistDefinition");

                    b.Navigation("ChecklistStatus");

                    b.Navigation("Creator");

                    b.Navigation("Report");

                    b.Navigation("Validator");
                });

            modelBuilder.Entity("TRAC.DataAccess.Data.ChecklistDefinition", b =>
                {
                    b.HasOne("TRAC.DataAccess.Data.ChecklistDefinitionStatus", "ChecklistDefinitionStatus")
                        .WithMany("ChecklistDefinitions")
                        .HasForeignKey("ChecklistDefinitionId");

                    b.Navigation("ChecklistDefinitionStatus");
                });

            modelBuilder.Entity("TRAC.DataAccess.Data.QuestionDefinition", b =>
                {
                    b.HasOne("TRAC.DataAccess.Data.SectionDefinition", "SectionDefinition")
                        .WithMany("QuestionDefinitions")
                        .HasForeignKey("SectionDefinitionId");

                    b.Navigation("SectionDefinition");
                });

            modelBuilder.Entity("TRAC.DataAccess.Data.QuestionDisplayCondition", b =>
                {
                    b.HasOne("TRAC.DataAccess.Data.AnswerDefinition", "AnswerDefinition")
                        .WithMany("QuestionDisplayConditions")
                        .HasForeignKey("AnswerDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TRAC.DataAccess.Data.QuestionDefinition", "QuestionDefinition")
                        .WithMany("QuestionDisplayConditions")
                        .HasForeignKey("QuestionToDisplayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnswerDefinition");

                    b.Navigation("QuestionDefinition");
                });

            modelBuilder.Entity("TRAC.DataAccess.Data.SectionDefinition", b =>
                {
                    b.HasOne("TRAC.DataAccess.Data.ChecklistDefinition", "ChecklistDefinition")
                        .WithMany("Sectiondefinitions")
                        .HasForeignKey("ChecklistDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChecklistDefinition");
                });

            modelBuilder.Entity("TRAC.DataAccess.Data.AnswerDefinition", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("QuestionDisplayConditions");
                });

            modelBuilder.Entity("TRAC.DataAccess.Data.Checklist", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("TRAC.DataAccess.Data.ChecklistDefinition", b =>
                {
                    b.Navigation("Checklists");

                    b.Navigation("Sectiondefinitions");
                });

            modelBuilder.Entity("TRAC.DataAccess.Data.ChecklistDefinitionStatus", b =>
                {
                    b.Navigation("ChecklistDefinitions");
                });

            modelBuilder.Entity("TRAC.DataAccess.Data.ChecklistStatus", b =>
                {
                    b.Navigation("Checklists");
                });

            modelBuilder.Entity("TRAC.DataAccess.Data.QuestionDefinition", b =>
                {
                    b.Navigation("AnswerDefinitions");

                    b.Navigation("Answers");

                    b.Navigation("QuestionDisplayConditions");
                });

            modelBuilder.Entity("TRAC.DataAccess.Data.Report", b =>
                {
                    b.Navigation("Checklists");
                });

            modelBuilder.Entity("TRAC.DataAccess.Data.SectionDefinition", b =>
                {
                    b.Navigation("QuestionDefinitions");
                });

            modelBuilder.Entity("TRAC.DataAccess.Data.Staff", b =>
                {
                    b.Navigation("CreatorChecklists");

                    b.Navigation("ValidatorChecklists");
                });
#pragma warning restore 612, 618
        }
    }
}
